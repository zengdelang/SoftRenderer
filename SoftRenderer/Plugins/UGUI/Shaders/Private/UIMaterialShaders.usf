#include "UIShaderCommon.usf"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Private/LocalVertexFactoryCommon.ush"

struct FUIVertexToPixelInterpolants
{
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	float3 PixelPositionExcludingWPO	: TEXCOORD9;
#endif
};

struct FUIShaderVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	FUIVertexToPixelInterpolants VertexToPixelInterpolants;
	float4 Position : SV_POSITION;
};

FMaterialVertexParameters GetMaterialVertexParameters(float3 WorldPosition, half4 VertexColor, float2 UV0, float2 UV1, float2 UV2, float2 UV3, float2 UV4, float2 UV5, float2 UV6, float2 UV7)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = VertexColor;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2 CustomizedUVs[8];
	CustomizedUVs[0] = UV0;
	CustomizedUVs[1] = UV1;
	CustomizedUVs[2] = UV2;
	CustomizedUVs[3] = UV3;
	CustomizedUVs[4] = UV4;
	CustomizedUVs[5] = UV5;
	CustomizedUVs[6] = UV6;
	CustomizedUVs[7] = UV7;
	
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = CustomizedUVs[CoordinateIndex];
	}
#endif  //NUM_MATERIAL_TEXCOORDS_VERTEX
	
	return Result;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	// Initialize the whole struct to 0
	// Really only the last two components of the packed UVs have the opportunity to be uninitialized
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

#if NUM_TEX_COORD_INTERPOLATORS
	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}
#endif

	//SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, VertexParameters.VertexColor);

	return Interpolants;
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition)
{
	float3 RotatedPosition = Primitive.LocalToWorld[0].xyz * LocalPosition.xxx + Primitive.LocalToWorld[1].xyz * LocalPosition.yyy + Primitive.LocalToWorld[2].xyz * LocalPosition.zzz;
	return float4(RotatedPosition + (Primitive.LocalToWorld[3].xyz + ResolvedView.PreViewTranslation.xyz),1);
}

void MainVS(
    in float3 Position : ATTRIBUTE0,
    in half4 Color : ATTRIBUTE1,
    in float2 TextureCoord0 : ATTRIBUTE2,
    in float2 TextureCoord1 : ATTRIBUTE3,
    in float2 TextureCoord2 : ATTRIBUTE4,
    in float2 TextureCoord3 : ATTRIBUTE5,
    in float2 TextureCoord4 : ATTRIBUTE6,
    in float2 TextureCoord5 : ATTRIBUTE7,
    in float2 TextureCoord6 : ATTRIBUTE8,
    in float2 TextureCoord7 : ATTRIBUTE9,
    OPTIONAL_VertexID
	out FUIShaderVSToPS Output
#if USE_GLOBAL_CLIP_PLANE && !USING_TESSELLATION
, out float OutGlobalClipPlaneDistance : SV_ClipDistance
#endif
#if INSTANCED_STEREO
, uint InstanceId : SV_InstanceID
#if !MULTI_VIEW
	, out float OutClipDistance : SV_ClipDistance1
#else
	, out uint ViewportIndex : SV_ViewPortArrayIndex
#endif
#endif
)
{
#if INSTANCED_STEREO
	const uint EyeIndex = GetEyeIndex(InstanceId);
	ResolvedView = ResolveView(EyeIndex);
#if !MULTI_VIEW
	OutClipDistance = 0.0;
#else
	ViewportIndex = EyeIndex;
#endif
#else
	uint EyeIndex = 0;
	ResolvedView = ResolveView();
#endif
	
	float4 WorldPositionExcludingWPO = TransformLocalToTranslatedWorld(Position);
	float4 WorldPosition = WorldPositionExcludingWPO;
	float4 ClipSpacePosition;

	half4 FinalColor = Color FCOLOR_COMPONENT_SWIZZLE;
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(WorldPosition.xyz, FinalColor,TextureCoord0, TextureCoord1, TextureCoord2, TextureCoord3, TextureCoord4, TextureCoord5, TextureCoord6, TextureCoord7);
	
	// Isolate instructions used for world position offset
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}

#if USING_TESSELLATION
	// We let the Domain Shader convert to post projection when tessellating
	Output.Position = WorldPosition;	

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		Output.VertexToPixelInterpolants.WorldPositionExcludingWPO = WorldPositionExcludingWPO.xyz;
	#endif
#else
	{
		float4 RasterizedWorldPosition = WorldPosition;
	#if ODS_CAPTURE
		float3 ODS = OffsetODS(RasterizedWorldPosition.xyz, ResolvedView.TranslatedWorldCameraOrigin.xyz, ResolvedView.StereoIPD);
		ClipSpacePosition = mul(float4(RasterizedWorldPosition.xyz + ODS, 1.0), ResolvedView.TranslatedWorldToClip);
	#else
		ClipSpacePosition = INVARIANT(mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));
	#endif
		Output.Position = INVARIANT(ClipSpacePosition);
	}

	#if INSTANCED_STEREO && !MULTI_VIEW
	BRANCH
	if (IsInstancedStereo())
	{
		// Clip at the center of the screen
		OutClipDistance = dot(Output.Position, EyeClipEdge[EyeIndex]);

		// Scale to the width of a single eye viewport
		Output.Position.x *= 0.5 * ResolvedView.HMDEyePaddingOffset;

		// Shift to the eye viewport
		Output.Position.x += (EyeOffsetScale[EyeIndex] * Output.Position.w) * (1.0f - 0.5 * ResolvedView.HMDEyePaddingOffset);
	}
	#endif
	
#if USE_GLOBAL_CLIP_PLANE
	OutGlobalClipPlaneDistance = dot(ResolvedView.GlobalClippingPlane, float4(WorldPosition.xyz - ResolvedView.PreViewTranslation.xyz, 1));
#endif
	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	Output.VertexToPixelInterpolants.PixelPositionExcludingWPO = WorldPositionExcludingWPO.xyz;
	#endif
#endif	// USING_TESSELLATION

	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(VertexParameters);

#if INSTANCED_STEREO
	#if USING_TESSELLATION
		Output.FactoryInterpolants.InterpolantsVSToPS.EyeIndex = EyeIndex;
	#else
		Output.FactoryInterpolants.EyeIndex = EyeIndex;
	#endif
#endif
	
	OutputVertexID( Output );
	
#if !OUTPUT_MOBILE_HDR && (COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	Output.Position.y *= SwitchVerticalAxisMultiplier;
#endif
}

FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for( int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}
#endif
	Result.VertexColor = GetColor(Interpolants);
	return Result;
}

void MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants
	, FUIVertexToPixelInterpolants VertexToPixelInterpolants
	, in float4 SvPosition : SV_Position
	OPTIONAL_IsFrontFace
	, out float4 OutColor	: SV_Target0
)
{
#if INSTANCED_STEREO
	const uint EyeIndex = Interpolants.EyeIndex;
	ResolvedView = ResolveView(EyeIndex);
#else
	const uint EyeIndex = 0;
	ResolvedView = ResolveView();
#endif
	
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
	CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, VertexToPixelInterpolants.PixelPositionExcludingWPO);
#else
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);
#endif
	
#if MATERIALBLENDING_MASKED || (DECAL_BLEND_MODE == DECALBLENDMODEID_VOLUMETRIC)
	clip(GetMaterialMask(PixelMaterialInputs));
#endif
	
	OutColor = half4(GetMaterialEmissive(PixelMaterialInputs).rgb, GetMaterialOpacity(PixelMaterialInputs));

	// Gamma Correct
	OutColor.rgb = GammaCorrect(OutColor.rgb);
}
