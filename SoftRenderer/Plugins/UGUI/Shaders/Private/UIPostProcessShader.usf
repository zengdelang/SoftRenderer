#include "/Engine/Private/Common.ush"

Texture2D ElementTexture;
SamplerState ElementTextureSampler;
float4 ShaderParams;

float4 UVBounds;

float4 DownsampleMain(FScreenVertexOutput Input) : SV_Target0
{
#if 0
	return Texture2DSample(ElementTexture, ElementTextureSampler, Input.UV);
#else

	float2 UV[4];

	float2 MinUV = UVBounds.xy;
	float2 MaxUV = UVBounds.zw;

#if !OUTPUT_MOBILE_HDR && (COMPILER_GLSL_ES2 || COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	float MinY = MinUV.y;
	MinUV.y = 1 - MaxUV.y;
	MaxUV.y = 1 - MinY;
#endif

	// Shader params X/Y stores the UV offset in each direction
	UV[0] = clamp(Input.UV + ShaderParams.xy * float2(-1, -1), MinUV, MaxUV);
	UV[1] = clamp(Input.UV + ShaderParams.xy * float2(1, -1), MinUV, MaxUV);
	UV[2] = clamp(Input.UV + ShaderParams.xy * float2(-1, 1), MinUV, MaxUV);
	UV[3] = clamp(Input.UV + ShaderParams.xy * float2(1, 1), MinUV, MaxUV);

	float4 Sample[4];

	UNROLL for(int i = 0; i < 4; ++i)
	{
		Sample[i] = Texture2DSample(ElementTexture, ElementTextureSampler, UV[i]);
	}

	return float4(Sample[0] + Sample[1] + Sample[2] + Sample[3]) * 0.25f;
#endif
}

void MainScreenVS(
	float2 InPosition : ATTRIBUTE0,
	float2 InUV       : ATTRIBUTE1,
	out FScreenVertexOutput Output
	)
{
	float2 OutUV;
	
	DrawRectangle( float4( InPosition, 0, 1 ), InUV, Output.Position, OutUV);

	Output.UV = OutUV;

#if !OUTPUT_MOBILE_HDR && (COMPILER_GLSL_ES2 || COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	Output.UV.y = 1 - Output.UV.y;
#endif
}

Texture2D InTexture;
SamplerState InTextureSampler;

float4x4 ViewProjectionMatrix;
float4x4 LocalToWorldMatrix;

float4 UVScaleOffset;

struct FPostProcessElementVSToPS
{
    float4 Position : SV_Position;
    float2 UV0 : TEXCOORD0;
	float2 UV1 : TEXCOORD1;
	float2 UV2 : TEXCOORD2;
	float2 UV3 : TEXCOORD3;
};

void MainVS(
    in float3 Position : ATTRIBUTE0,
    in half4 Color : ATTRIBUTE1,
    in float2 TextureCoord0 : ATTRIBUTE2,
    in float2 TextureCoord1 : ATTRIBUTE3,
    in float2 TextureCoord2 : ATTRIBUTE4,
    in float2 TextureCoord3 : ATTRIBUTE5,
    in float2 TextureCoord4 : ATTRIBUTE6,
	in float2 TextureCoord5 : ATTRIBUTE7,
	in float2 TextureCoord6 : ATTRIBUTE8,
	in float2 TextureCoord7 : ATTRIBUTE9,
	out FPostProcessElementVSToPS Output
)
{
	Output.Position = mul(float4(Position.xyz, 1.0), LocalToWorldMatrix);
	Output.Position = mul(Output.Position, ViewProjectionMatrix);
	
	// Convert position to UI space 
	float2 ClipPosition = float2(Output.Position.x / Output.Position.w, Output.Position.y / Output.Position.w);

	// Output.UV0 = float2(Output.Position.x / Output.Position.w, -Output.Position.y / Output.Position.w) * 0.5 + float2(0.5, 0.5);
	Output.UV0 = float2(ClipPosition.x, -ClipPosition.y) * 0.5 + float2(0.5, 0.5);
	Output.UV0 = (Output.UV0  - UVScaleOffset.xy) * UVScaleOffset.zw;

	// TODO UV3 Rect Clip 
	Output.UV2 = TextureCoord2;
	Output.UV3 = TextureCoord3;

#if !OUTPUT_MOBILE_HDR && (COMPILER_GLSL_ES2 || COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	Output.Position.y *= -1;
#endif
}

void MainPS(
	FPostProcessElementVSToPS Input,
	out float4 OutColor : SV_Target0
)
{
	OutColor = Texture2DSample(InTexture, InTextureSampler, Input.UV0);

	float Alpha = OutColor.a;
	float SmoothValue = 0;
	float Delta = 3 * fwidth(Input.UV2);
	float V = Input.UV2.x + Delta;

	//if (V >= 1.0f) {
	//    SmoothValue = (V - 1.0f) / Delta;
	//}
	SmoothValue = step(1.0f, V) * (V - 1.0f) / Delta;
	OutColor.a = OutColor.a * smoothstep(1, 0.0f, saturate(SmoothValue));
}
