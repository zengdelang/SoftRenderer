#include "UIShaderCommon.usf"
#include "/Engine/Private/Common.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"

#define VertexFactoryGetInterpolants VertexFactoryGetInterpolantsVSToPS

struct FUIVertexToPixelInterpolants
{
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	float3 PixelPositionExcludingWPO	: TEXCOORD9;
#endif
};

struct FUIShaderVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	FUIVertexToPixelInterpolants VertexToPixelInterpolants;
	float4 Position : SV_POSITION;
};

void MainVS(
	FVertexFactoryInput Input,
	OPTIONAL_VertexID
	out FUIShaderVSToPS Output
#if USE_GLOBAL_CLIP_PLANE && !USING_TESSELLATION
	, out float OutGlobalClipPlaneDistance : SV_ClipDistance
#endif
#if INSTANCED_STEREO
	, uint InstanceId : SV_InstanceID
	#if !MULTI_VIEW
		, out float OutClipDistance : SV_ClipDistance1
	#else
		, out uint ViewportIndex : SV_ViewPortArrayIndex
	#endif
#endif
)
{
#if INSTANCED_STEREO
	const uint EyeIndex = GetEyeIndex(InstanceId);
	ResolvedView = ResolveView(EyeIndex);
	#if !MULTI_VIEW
		OutClipDistance = 0.0;
	#else
		ViewportIndex = EyeIndex;
	#endif
#else
	uint EyeIndex = 0;
	ResolvedView = ResolveView();
#endif

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
	float4 WorldPositionExcludingWPO = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float4 WorldPosition = WorldPositionExcludingWPO;
	float4 ClipSpacePosition;

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);	
	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPosition.xyz, TangentToLocal);

	// Isolate instructions used for world position offset
	// As these cause the optimizer to generate different position calculating instructions in each pass, resulting in self-z-fighting.
	// This is only necessary for shaders used in passes that have depth testing enabled.
	{
		WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	}
	 
#if USING_TESSELLATION
	// We let the Domain Shader convert to post projection when tessellating
	Output.Position = WorldPosition;	

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		Output.VertexToPixelInterpolants.WorldPositionExcludingWPO = WorldPositionExcludingWPO.xyz;
	#endif
#else
	{
		float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPosition);
	#if ODS_CAPTURE
		float3 ODS = OffsetODS(RasterizedWorldPosition.xyz, ResolvedView.TranslatedWorldCameraOrigin.xyz, ResolvedView.StereoIPD);
		ClipSpacePosition = mul(float4(RasterizedWorldPosition.xyz + ODS, 1.0), ResolvedView.TranslatedWorldToClip);
	#else
		ClipSpacePosition = INVARIANT(mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip));
	#endif
		Output.Position = INVARIANT(ClipSpacePosition);
	}

	#if INSTANCED_STEREO && !MULTI_VIEW
	BRANCH
	if (IsInstancedStereo())
	{
		// Clip at the center of the screen
		OutClipDistance = dot(Output.Position, EyeClipEdge[EyeIndex]);

		// Scale to the width of a single eye viewport
		Output.Position.x *= 0.5 * ResolvedView.HMDEyePaddingOffset;

		// Shift to the eye viewport
		Output.Position.x += (EyeOffsetScale[EyeIndex] * Output.Position.w) * (1.0f - 0.5 * ResolvedView.HMDEyePaddingOffset);
	}
	#endif
	
#if USE_GLOBAL_CLIP_PLANE
	OutGlobalClipPlaneDistance = dot(ResolvedView.GlobalClippingPlane, float4(WorldPosition.xyz - ResolvedView.PreViewTranslation.xyz, 1));
#endif
	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		Output.VertexToPixelInterpolants.PixelPositionExcludingWPO = WorldPositionExcludingWPO.xyz;
	#endif
#endif	// USING_TESSELLATION

	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);

#if INSTANCED_STEREO
	#if USING_TESSELLATION	
		Output.FactoryInterpolants.InterpolantsVSToPS.EyeIndex = EyeIndex;
	#else
		Output.FactoryInterpolants.EyeIndex = EyeIndex;
	#endif
#endif

	OutputVertexID( Output );

#if !OUTPUT_MOBILE_HDR && ( COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	Output.Position.y *= SwitchVerticalAxisMultiplier;
#endif
}

void MainPS(
		FVertexFactoryInterpolantsVSToPS Interpolants
		, FUIVertexToPixelInterpolants VertexToPixelInterpolants
		, in float4 SvPosition : SV_Position		// after all interpolators
		OPTIONAL_IsFrontFace
		, out float4 OutColor : SV_Target0
)
{
#if INSTANCED_STEREO
	const uint EyeIndex = Interpolants.EyeIndex;
	ResolvedView = ResolveView(EyeIndex);
#else
	const uint EyeIndex = 0;
	ResolvedView = ResolveView();
#endif
	
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	
#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
	CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, VertexToPixelInterpolants.PixelPositionExcludingWPO);
#else
	CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, SvPosition, bIsFrontFace);
#endif

#if MATERIALBLENDING_MASKED || (DECAL_BLEND_MODE == DECALBLENDMODEID_VOLUMETRIC)
	clip(GetMaterialMask(PixelMaterialInputs));
#endif
	
	OutColor = half4(GetMaterialEmissive(PixelMaterialInputs).rgb, GetMaterialOpacity(PixelMaterialInputs));
	
	// Gamma Correct
	OutColor.rgb = GammaCorrect(OutColor.rgb);
}