#include "/Engine/Private/Common.ush"

Texture2D ElementTexture;
SamplerState ElementTextureSampler;
Texture2D MaskTexture;
SamplerState MaskTextureSampler;
float4 UVBounds;

float4 TimeEtc;
float Strength;
float4 GlitchParams1;
float4 GlitchParams2;
float4 GlitchParams3;

float RandomNoise(float Speed, float2 Seed)
{
    return frac(sin(dot(Seed * floor(TimeEtc.x * Speed), float2(17.13, 3.71))) * 43758.5453123);
}

float RandomNoise(float2 Seed2)
{
    return frac(sin(dot(Seed2, float2(12.9898, 78.233))) * 43758.5453);
}

float RandomNoise(float Seed)
{
    return RandBBSfloat(Seed);
}

float RandomNoise(float2 uv,float tile)
{
    uv = floor(uv * tile);
    float Magic = 3571;
    float2 PixelPos = uv * 512;
    float2 Random2 = (1.0 / 4320.0) * PixelPos + float2(0.25, 0.0);
    float Random = frac(dot(Random2 * Random2, Magic));
    Random = frac(Random * Random * (2 * Magic));
    return Random;
}

float3 CalculateNoiseColor(float2 uv, float2 localUV)
{
	float Time = TimeEtc.x;
	float Speed = GlitchParams1.x;
	float TexScaleX = GlitchParams1.y;
	float TexScaleY = GlitchParams1.z;
	float Fading = GlitchParams1.w;
	float4 SceneColor = Texture2DSample(ElementTexture, ElementTextureSampler, uv);

	float NoiseX = RandomNoise(Time * Speed + localUV / float2(-TexScaleX, TexScaleY));
	float NoiseY = RandomNoise(Time * Speed - localUV / float2(TexScaleX, -TexScaleY));
	float NoiseZ = RandomNoise(Time * Speed + localUV / float2(TexScaleX, TexScaleY));
	float3 NoiseColor = SceneColor.rgb + 0.25 * float3(NoiseX, NoiseY, NoiseZ) - 0.125;

	return lerp(SceneColor, NoiseColor, Fading);
}

float4 GlitchMain(FScreenVertexOutput Input) : SV_Target0
{
    float2 MinUV = UVBounds.xy;
    float2 MaxUV = UVBounds.zw;

#if !OUTPUT_MOBILE_HDR && (COMPILER_GLSL_ES2 || COMPILER_GLSL_ES3_1 || COMPILER_GLSL_ES3_1_EXT)
	float MinY = MinUV.y;
	MinUV.y = 1 - MaxUV.y;
	MaxUV.y = 1 - MinY;
	
	Input.UV.y = 1 - Input.UV.y;
#endif
	
    float2 UV = clamp(Input.UV, MinUV, MaxUV);
	float2 LocalUV = (Input.UV - MinUV)/(MaxUV - MinUV);
    
	float4 OutputColor = float4(0, 0, 0, 1);

	if (TimeEtc.z < 2.0)
    {
		// Analog Noise Glitch and RGB Split Glitch
        float Speed = TimeEtc.x * GlitchParams2.x;
        float SplitAmout = (1.0 + sin(Speed * 6.0)) * 0.5;
        SplitAmout *= 1.0 + sin(Speed * 16.0) * 0.5;
        SplitAmout *= 1.0 + sin(Speed * 19.0) * 0.5;
        SplitAmout *= 1.0 + sin(Speed * 27.0) * 0.5;
        SplitAmout = pow(SplitAmout, GlitchParams2.y);
        SplitAmout *= (0.05 * GlitchParams2.z);
		
        float3 FinalColor;
        FinalColor.r = CalculateNoiseColor(float2(UV.x + SplitAmout, UV.y), LocalUV).r;
        FinalColor.g = CalculateNoiseColor(UV, LocalUV).g;
        FinalColor.b = CalculateNoiseColor(float2(UV.x - SplitAmout, UV.y), LocalUV).b;
        	
        // FinalColor *= (1.0 - SplitAmout * 0.5);

        OutputColor = float4(FinalColor, Texture2DSample(MaskTexture, MaskTextureSampler, LocalUV).a);
    }
    else if (TimeEtc.z < 3.0) 
    {
		// Image Block Glitch
        float Speed = TimeEtc.w;
		float BlockSizeX = GlitchParams1.x;
        float BlockSizeY = GlitchParams1.y;
        float OffsetScaleX = GlitchParams1.z;
        float OffsetScaleY = GlitchParams1.w;
        	
		float Block =  RandomNoise(Speed, floor(LocalUV * float2(BlockSizeX, BlockSizeY)));;
		float DisplaceNoise = pow(Block, 8.0) * pow(Block, 3.0);
		float2 Offset = float2(DisplaceNoise * OffsetScaleX * RandomNoise(7.0), DisplaceNoise * OffsetScaleY * RandomNoise(13.0));

        OutputColor =   Texture2DSample(ElementTexture, ElementTextureSampler, UV + Offset);
    }
    else
    {
        OutputColor = Texture2DSample(ElementTexture, ElementTextureSampler, UV);
    }

	// float4 Tint = float4(1, 1, 1, 0.1);
	OutputColor.a = OutputColor.a * Strength;

	return OutputColor;
}